name: Backend CI/CD

on:
  push:
    branches: [ master, main, dev ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
      - 'infrastructure/**'
  pull_request:
    branches: [ master, main, dev ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  workflow_dispatch:

# Add permissions for OIDC authentication
permissions:
  id-token: write
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .

    # Run formatters first (and don't just check)
    - name: Format with black
      run: black .

    - name: Sort imports with isort
      run: isort .

    # Then check for issues
    - name: Verify formatting with black
      run: black . --check

    - name: Verify imports with isort
      run: isort . --check-only

    - name: Lint with flake8
      run: flake8 . --extend-ignore=I100,I201

    - name: Type check with mypy
      run: mypy $(find app -name "*.py")

    - name: Run tests
      env:
        ENV_FILE: .env.test
      run: |
        cp .env.test .env
        pytest -v --cov=app --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: true

  deploy-to-azure:
    needs: test
    if: github.ref == 'refs/heads/dev' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Azure CLI
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Bicep
        uses: anthony-c-martin/setup-bicep@v0.3

      - name: Deploy infrastructure
        id: deploy-infra
        run: |
          az deployment group create \
            --resource-group ski-dev-clth-pussel \
            --template-file infrastructure/main.bicep \
            --parameters environmentName=dev \
            --output json > deployment-output.json

          echo "app_name=$(jq -r '.properties.outputs.appServiceName.value' deployment-output.json)" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Azure container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push container image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/pussel-backend:${{ github.sha }},${{ secrets.ACR_LOGIN_SERVER }}/pussel-backend:latest
          cache-from: type=registry,ref=${{ secrets.ACR_LOGIN_SERVER }}/pussel-backend:latest
          cache-to: type=inline

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ steps.deploy-infra.outputs.app_name }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          images: ${{ secrets.ACR_LOGIN_SERVER }}/pussel-backend:${{ github.sha }}
